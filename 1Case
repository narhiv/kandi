vals=c()
vals2=c()
for (j in 1:100) {
n<-99; #Number of curves
T<-60; #Number of "observations"
t.<-seq(0,2*pi,l=T) #Set for trigonometric multipliers
t3.<-seq(1,1,l=T) #Set for constant functions
y<-matrix(NA,n,T) #Set matrix to save values
z <- matrix(NA,1,T) #
for(i in 1:n)	y[i,]<-runif(1,0,1)*sin(t.)+runif(1,0,1)*cos(t.) #values of matrix y from random uniform distribution w/ trig. multipliers
for (j in 1:1) z[j,] <- runif(1,0,0)*t3. #constant outliers 
z
ypz <- rbind(y,z) #Combine y and z for outlier detection tests
#plot(fdata(ypz))
ypz2 <- derivcurves(ypz)
#plot(fdata(ypz2))
mfhypz <- MFHD(ypz,ypz2)

plot(c(0,60),c(-1.3,1.25),type="n",xlab="t",ylab="y") #Empty plot window
#For-looping each y-line and assigning them light-to-dark values based on their MFHDdepth-values
for (i in 1:100) {
  lines(ypz[i,],col=gray(0.7-mfhypz$MFHDdepth[i]))
}
sort(mfhypz$MFHDdepth,index.return=TRUE)

fmypz2 <- depth.FM(fdata(ypz))
sort(fmypz2$dep,index.return=TRUE)

if (mfhypz$MFHDdepth[,100]==min(mfhypz$MFHDdepth)) {
   vals=c(vals,1)
} else {
   vals=c(vals,0)
} 
if (fmypz2$dep[100]==min(fmypz2$dep)) {
  vals2=c(vals2,1)
} else {
  vals2=c(vals2,0)
} 
}
