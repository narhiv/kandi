eps <- runif(100,-0.3,0.5)
theta1 <- 0.25
theta2 <- 0.5
theta3 <- -0.4

y <- c()
y[1] <- eps[1]+0.2
y[2] <- theta1*eps[1]+eps[2]+0.2
y[3] <- theta1*eps[2]+theta2*eps[1]+eps[3]+0.2
y[4] <- theta1*eps[3]+theta2*eps[2]+theta3*eps[1]+eps[4]+0.2
for (i in 5:100) {
  y[i] <- theta1*eps[i-1]+theta2*eps[i-2]+theta3*eps[i-3]+eps[i]+0.2
}
plot.ts(y)

#y <- arima.sim(model=list(order=c(0,0,3),ma=c(0.3,0.3,-0.3)),n=100)

x=c()
x[1] <- y[1]
for (i in 2:100) {
  x[i] <- y[i] + x[i-1]
} #runif(1,-0.3,0.3)-kerroin jälkimmäiselle termille mahdollinen?
plot.ts(x)

u1=c()
u1[1] <- x[1]
for (i in 2:100) {
  u1[i] <- (x[i] + u1[i-1])
}
plot.ts(u1)


u=c()
u[1] <- x[1]
for (i in 2:100) {
  u[i] <- (x[i] + u[i-1]*runif(1,0.95,1.05))
}
plot.ts(u)

xh <- diff(u) #Jos laittaa u1 palauttaa x_t sarjan
xh <- c(0,xh)
plot.ts(xh)
yh <- diff(xh)
yh <- c(0,yh)
plot.ts(yh)
yhe <- yh[1:95]
#x <- x[!x %in% 2:10]

malliMA <- arima(yhe,order=c(0,0,3))
yhEnne <- predict(malliMA, n.ahead=5)
yhEnnustus <- c(yhe,yhEnne$pred)
plot.ts(yhEnnustus)

xhe <- xh[1:95]
for (i in 96:100) {
  xhe[i] <- yhEnnustus[i]+xh[i-1]
}
plot.ts(xh)
lines(xhe,col="purple")

plot.ts(xh, xlim=c(80,100),ylim=c(-40,80))
lines(xhe, col="purple")

uhe <- u[1:95]
for (i in 96:100) {
  uhe[i] <- xhe[i]+u[i-1]
}
plot.ts(u)
lines(uhe, col="purple")

plot.ts(u, xlim=c(80,100),ylim=c(800,1200))
lines(uhe, col="purple")
#xhdiff <- c()
#for (i in 1:100) {
 # xhdiff[i] <- u[i]-u[i-1]
#}

